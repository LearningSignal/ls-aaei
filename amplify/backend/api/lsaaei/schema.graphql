enum YN {
    Y
    N
}

# enum LmsType {
#     CANVAS
#     MOODLE
#     BLACKBOARD
# }

# ## 자이닉스에 확인 필요!!
# enum EnrollmentType {
#     ADMIN
#     STUDENT
#     TEACHER
# }

type Account
    @model
    @key(name: "byLmsAccountByLmsType", fields: ["lmsAccountID", "lmsType"])
    @auth(rules: [{ allow: public }]) {
    id: ID!
    lmsAccountID: ID!
    lmsType: String!
    name: String!
    status: String!
    users: [AccountUser] @connection(keyName: "byAccount", fields: ["id"])
    courses: [AccountCourse] @connection(keyName: "byAccount", fields: ["id"])
    coursesByCourseName: [AccountCourse]
        @connection(keyName: "byAccountByCourseName", fields: ["id"])
    coursesByTerm: [AccountCourse]
        @connection(keyName: "byAccountByTerm", fields: ["id"])
    coursesByTermByCourseName: [AccountCourse]
        @connection(keyName: "byAccountByTermByCourseName", fields: ["id"])
}

type AccountCourse
    @model
    @key(name: "byAccount", fields: ["accountID", "id"])
    @key(name: "byAccountByCourseName", fields: ["accountID", "courseName"])
    @key(name: "byAccountByTerm", fields: ["accountID", "term"])
    @key(
        name: "byAccountByTermByCourseName"
        fields: ["accountID", "term", "courseName"]
    )
    @key(name: "byCourse", fields: ["courseID", "id"])
    @auth(rules: [{ allow: public }]) {
    id: ID!
    accountID: ID!
    courseID: ID!
    lmsType: String!
    lmsCourseAccountAssociationID: ID!
    lmsCourseID: ID!
    lmsAccountID: ID!
    courseName: String!
    term: String!
    account: Account! @connection(fields: ["accountID"])
    course: Course! @connection(fields: ["courseID"])
}

type Course
    @model
    @key(name: "byLmsCourseByLmsType", fields: ["lmsCourseID", "lmsType"])
    @auth(rules: [{ allow: public }]) {
    id: ID!
    lmsCourseID: ID!
    lmsType: String!
    name: String!
    code: String! # 학수번호. 수번번호를 추가해야 할 수도 있음 (수업번호)
    term: String!
    status: String!
    accounts: [AccountCourse] @connection(keyName: "byCourse", fields: ["id"])
    enrollments: [Enrollment] @connection(keyName: "byCourse", fields: ["id"])
    attributes: [Attribute] @connection(keyName: "byCourse", fields: ["id"])
    interventions: [Intervention]
        @connection(keyName: "byCourse", fields: ["id"])
    historys: [History] @connection(keyName: "byCourse", fields: ["id"])
    historysByDate: [History]
        @connection(keyName: "byCourseByDate", fields: ["id"])
    historyByInterventionByDate: [History]
        @connection(keyName: "byCourseByInterventionByDate", fields: ["id"])
}

type Attribute
    @model
    @key(name: "byCourse", fields: ["courseID", "id"])
    @auth(rules: [{ allow: public }]) {
    id: ID!
    courseID: ID!
    status: String!
    type: String! # 출석, 과제, 퀴즈, 토론, 시험, ...
    name: String!
    scoreYN: YN!
    maxScore: Float
    datas: [Data] @connection(keyName: "byAttribute", fields: ["id"])
}

type Data
    @model
    @key(name: "byAttribute", fields: ["attributeID", "id"])
    @key(name: "byEnrollment", fields: ["enrollmentID", "id"])
    @auth(rules: [{ allow: public }]) {
    id: ID!
    attributeID: ID!
    enrollmentID: ID!
    status: String! # 과제, 퀴즈 등: submitted or unsubmitted, 출석: attended or absent. 토론 등에 더 필요할 경우 추가
    value: String # 출석, 과제, 퀴즈, 토론, 시험, 등의 타입에 따라 값이 달라지므로 String으로 처리. 없을 수도 있음
    attribute: Attribute! @connection(fields: ["attributeID"])
    enrollment: Enrollment! @connection(fields: ["enrollmentID"])
}

type Enrollment
    @model
    @key(
        name: "byLmsEnrollmentByLmsType"
        fields: ["lmsEnrollmentId", "lmsType"]
    )
    @key(name: "byCourse", fields: ["courseID", "id"])
    @key(name: "byUser", fields: ["userID", "id"])
    @key(name: "byUserByCourse", fields: ["userID", "courseID"])
    @auth(rules: [{ allow: public }]) {
    id: ID!
    userID: ID!
    courseID: ID!
    lmsEnrollmentId: ID!
    lmsType: String! # 학생 (STUDENT), 교수자 (TEACHER), ...
    type: String!
    lastActivityAt: String
    riskProbability: Float
    status: String!
    user: User! @connection(fields: ["userID"])
    feeds: [Feed] @connection(keyName: "byEnrollment", fields: ["id"])
    feedsByDate: [Feed]
        @connection(keyName: "byEnrollmentByDate", fields: ["id"])
    datas: [Data] @connection(keyName: "byEnrollment", fields: ["id"])
}

type AccountUser
    @model
    @key(name: "byAccount", fields: ["accountID", "id"])
    @key(name: "byUser", fields: ["userID", "id"])
    @auth(rules: [{ allow: public }]) {
    id: ID!
    accountID: ID!
    userID: ID!
    lmsType: String!
    lmsAccountUserID: ID!
    lmsAccountID: ID!
    lmsUserID: ID!
    account: Account! @connection(fields: ["accountID"])
    user: User! @connection(fields: ["userID"])
}

type User
    @model
    @key(name: "byLmsUserByLmsType", fields: ["lmsUserID", "lmsType"])
    @auth(rules: [{ allow: public }]) {
    id: ID!
    lmsUserID: ID!
    lmsType: String!
    name: String!
    email: String
    phoneNumber: String
    snsType: String
    snsID: String
    lastLoggedOut: String
    status: String!
    accounts: [AccountUser] @connection(keyName: "byUser", fields: ["id"])
    enrollmentByCourse: [Enrollment]
        @connection(keyName: "byUserByCourse", fields: ["id"])
    enrollments: [Enrollment] @connection(keyName: "byUser", fields: ["id"])
    interventions: [Intervention] @connection(keyName: "byUser", fields: ["id"])
    senderHistorys: [History]
        @connection(keyName: "bySenderUserByDate", fields: ["id"])
    recipientHistorys: [History]
        @connection(keyName: "byRecipientUserByDate", fields: ["id"])
}

type Intervention
    @model
    @key(name: "byUser", fields: ["creatorUserID", "id"])
    @key(name: "byCourse", fields: ["courseID", "id"])
    @key(name: "byUserbyCourse", fields: ["creatorUserID", "courseID"])
    @auth(rules: [{ allow: public }]) {
    id: ID!
    creatorUserID: ID!
    courseID: ID!
    name: String!
    description: String
    conditions: String # JSON 데이터
    type: String!
    sendTime: String
    recipientIDs: String # JSON 데이터 (리스트)
    title: String!
    content: String!
    emailYN: YN!
    lmsYN: YN!
    smsYN: YN!
    snsYN: YN!
    status: String! # DELETE/ACTIVE/INACTIVE
    feeds: [Feed] @connection(keyName: "byIntervention", fields: ["id"])
    feedsByDate: [Feed]
        @connection(keyName: "byInterventionByDate", fields: ["id"])
    historys: [History] @connection(keyName: "byIntervention", fields: ["id"])
    historysByDate: [History]
        @connection(keyName: "byInterventionByDate", fields: ["id"])
}

type Feed
    @model
    @key(name: "byEnrollment", fields: ["enrollmentID", "id"])
    @key(name: "byEnrollmentByDate", fields: ["enrollmentID", "date"])
    @key(name: "byIntervention", fields: ["interventionID", "id"])
    @key(name: "byInterventionByDate", fields: ["interventionID", "date"])
    @auth(rules: [{ allow: public }]) {
    id: ID!
    enrollmentID: ID!
    interventionID: ID!
    feed: String!
    type: String! # 이메일, LMS 메시지, ...
    date: String!
}

type History
    @model
    @key(name: "byCourse", fields: ["courseID", "id"])
    @key(name: "byCourseByDate", fields: ["courseID", "date"])
    @key(
        name: "byCourseByInterventionByDate"
        fields: ["courseID", "interventionID", "date"]
    )
    @key(name: "byIntervention", fields: ["courseID", "id"])
    @key(name: "byInterventionByDate", fields: ["courseID", "date"])
    @key(name: "bySenderUserByDate", fields: ["senderUserID", "date"])
    @key(name: "byRecipientUserByDate", fields: ["recipientUserID", "date"])
    @auth(rules: [{ allow: public }]) {
    id: ID!
    courseID: ID!
    interventionID: ID!
    senderUserID: ID!
    recipientUserID: ID!
    emailYN: YN!
    lmsYN: YN!
    smsYN: YN!
    snsYN: YN!
    date: String!
}